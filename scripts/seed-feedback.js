const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function main() {
  console.log('üå± D√©but du seeding des retours de consultation...')

  try {
    // 1. R√©cup√©rer les consultations termin√©es
    const completedAppointments = await prisma.appointment.findMany({
      where: {
        status: 'COMPLETED'
      },
      include: {
        user: true,
        consultant: true,
        company: true
      }
    })

    if (completedAppointments.length === 0) {
      console.log('‚ùå Aucune consultation termin√©e trouv√©e.')
      console.log('üí° Ajoutons d\'abord quelques consultations termin√©es...')
      
      // Mettre √† jour quelques consultations pour les marquer comme termin√©es
      const appointmentsToComplete = await prisma.appointment.findMany({
        where: {
          status: { in: ['CONFIRMED', 'ASSIGNED'] }
        },
        take: 10
      })

      for (const apt of appointmentsToComplete) {
        await prisma.appointment.update({
          where: { id: apt.id },
          data: {
            status: 'COMPLETED',
            completedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000) // Compl√©t√© dans les 30 derniers jours
          }
        })
      }

      console.log(`‚úÖ ${appointmentsToComplete.length} consultations marqu√©es comme termin√©es`)
      
      // Recharger les consultations termin√©es
      const updatedAppointments = await prisma.appointment.findMany({
        where: {
          status: 'COMPLETED'
        },
        include: {
          user: true,
          consultant: true,
          company: true
        }
      })
      completedAppointments.push(...updatedAppointments)
    }

    console.log(`üìã ${completedAppointments.length} consultations termin√©es trouv√©es`)

    // 2. Domaines d'am√©lioration possibles
    const improvementAreas = [
      'Gestion du temps',
      'Communication',
      '√âcoute active',
      'Exemples pratiques',
      'Suivi post-consultation',
      'Clart√© des explications',
      'Outils recommand√©s',
      'M√©thodologie',
      'Disponibilit√©',
      'R√©activit√©'
    ]

    // 3. Points forts possibles
    const strengthsOptions = [
      'Expertise technique',
      'P√©dagogie',
      '√âcoute',
      'Pragmatisme',
      'Adaptabilit√©',
      'Professionnalisme',
      'Cr√©ativit√©',
      'Leadership',
      'Vision strat√©gique',
      'Empathie'
    ]

    // 4. Commentaires types positifs
    const positiveComments = [
      'Excellent consultant ! Tr√®s professionnel et √† l\'√©coute. Les conseils sont pertinents et applicables imm√©diatement.',
      'Session tr√®s enrichissante. Les m√©thodologies propos√©es sont concr√®tes et adapt√©es √† notre contexte.',
      'Parfait accompagnement. Le consultant a su identifier nos besoins et proposer des solutions pragmatiques.',
      'Super exp√©rience ! Communication claire et expertise technique impressionnante.',
      'Consultation tr√®s productive. Les outils recommand√©s nous font d√©j√† gagner du temps.',
      'Formidable consultant ! Approche structur√©e et recommandations pertinentes.',
      'Excellente session de coaching. Vision strat√©gique et conseils actionnables.',
      'Tr√®s satisfait de l\'accompagnement. Expertise pointue et p√©dagogie remarquable.',
      'Session de qualit√© exceptionnelle. Le consultant ma√Ætrise parfaitement son domaine.',
      'Parfait ! √âcoute active et solutions innovantes adapt√©es √† nos enjeux.'
    ]

    // 5. Commentaires types neutres/mixtes
    const neutralComments = [
      'Consultation int√©ressante dans l\'ensemble. Quelques points pourraient √™tre approfondis.',
      'Bonne session, mais j\'aurais aim√© plus d\'exemples concrets pour notre secteur.',
      'Consultant comp√©tent. La m√©thodologie pr√©sent√©e n√©cessite quelques adaptations.',
      'Session correcte. Les recommandations sont globalement pertinentes.',
      'Consultation utile. Quelques am√©liorations possibles sur la gestion du temps.',
      'Bon accompagnement. Les outils propos√©s demandent √† √™tre personnalis√©s.'
    ]

    // 6. G√©n√©rer des retours pour 80% des consultations
    let feedbackCount = 0
    const targetFeedbacks = Math.floor(completedAppointments.length * 0.8)

    for (let i = 0; i < targetFeedbacks; i++) {
      const appointment = completedAppointments[i]
      
      // V√©rifier qu'il n'y a pas d√©j√† un retour
      const existingFeedback = await prisma.consultationFeedback.findUnique({
        where: { appointmentId: appointment.id }
      })

      if (existingFeedback) {
        continue // Passer si feedback d√©j√† existant
      }

      // G√©n√©rer des notes r√©alistes (distribution biais√©e vers le positif)
      const ratingDistribution = [5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 2] // Plus de 5 et 4
      const rating = ratingDistribution[Math.floor(Math.random() * ratingDistribution.length)]
      
      const satisfactionLevel = Math.max(1, rating + (Math.random() > 0.5 ? 0 : -1))
      const wouldRecommend = rating >= 4 || (rating === 3 && Math.random() > 0.3)

      // Choisir un commentaire selon la note
      let comments = ''
      let selectedImprovementAreas = []
      let selectedStrengths = []

      if (rating >= 4) {
        // Commentaire positif
        comments = positiveComments[Math.floor(Math.random() * positiveComments.length)]
        
        // 2-4 points forts
        const strengthsCount = Math.floor(Math.random() * 3) + 2
        selectedStrengths = strengthsOptions
          .sort(() => 0.5 - Math.random())
          .slice(0, strengthsCount)
          
        // Peu ou pas d'am√©liorations
        if (Math.random() > 0.7) {
          selectedImprovementAreas = [improvementAreas[Math.floor(Math.random() * improvementAreas.length)]]
        }
      } else {
        // Commentaire neutre/mitig√©
        comments = neutralComments[Math.floor(Math.random() * neutralComments.length)]
        
        // 1-2 points forts
        const strengthsCount = Math.floor(Math.random() * 2) + 1
        selectedStrengths = strengthsOptions
          .sort(() => 0.5 - Math.random())
          .slice(0, strengthsCount)
          
        // 1-3 am√©liorations
        const improvementCount = Math.floor(Math.random() * 3) + 1
        selectedImprovementAreas = improvementAreas
          .sort(() => 0.5 - Math.random())
          .slice(0, improvementCount)
      }

      // Ajouter une variation dans les commentaires
      if (Math.random() > 0.7) {
        const additionalNotes = [
          ' Merci pour cette session !',
          ' √Ä recommander sans h√©sitation.',
          ' H√¢te de mettre en pratique ces conseils.',
          ' Session qui d√©passe mes attentes.',
          ' Parfait accompagnement pour notre √©quipe.'
        ]
        comments += additionalNotes[Math.floor(Math.random() * additionalNotes.length)]
      }

      // Date de cr√©ation du feedback (1-14 jours apr√®s la consultation)
      const feedbackDate = new Date(appointment.completedAt)
      feedbackDate.setDate(feedbackDate.getDate() + Math.floor(Math.random() * 14) + 1)

      try {
        await prisma.consultationFeedback.create({
          data: {
            appointmentId: appointment.id,
            rating,
            satisfactionLevel,
            wouldRecommend,
            comments,
            improvementAreas: selectedImprovementAreas,
            strengths: selectedStrengths,
            createdAt: feedbackDate
          }
        })

        feedbackCount++
      } catch (error) {
        console.error(`Erreur cr√©ation feedback pour ${appointment.id}:`, error.message)
      }
    }

    // 7. Afficher les statistiques finales
    const totalFeedbacks = await prisma.consultationFeedback.count()
    const avgRating = await prisma.consultationFeedback.aggregate({
      _avg: { rating: true }
    })
    
    const recommendationCount = await prisma.consultationFeedback.count({
      where: { wouldRecommend: true }
    })

    const recommendationRate = totalFeedbacks > 0 
      ? Math.round((recommendationCount / totalFeedbacks) * 100) 
      : 0

    console.log('‚úÖ Seeding des retours termin√© avec succ√®s!')
    console.log(`üìä ${feedbackCount} nouveaux retours cr√©√©s`)
    console.log(`üìà Total retours: ${totalFeedbacks}`)
    console.log(`‚≠ê Note moyenne: ${avgRating._avg.rating?.toFixed(1) || 0}/5`)
    console.log(`üëç Taux de recommandation: ${recommendationRate}%`)

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error)
    throw error
  }
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  }) 